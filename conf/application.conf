# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = organisations-matching-api

appUrl = CHANGEME

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.organisationsmatchingapi.handlers.VersioningRequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"

# Mongo Mondule
play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.organisationsmatchingapi.handlers.CustomErrorHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here
play.modules.enabled += "uk.gov.hmrc.organisationsmatchingapi.config.ConfigModule"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Session configuration
# ~~~~~
application.session.httpOnly = false
application.session.secure = false

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes


# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {

  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

}

versioning {
  unversionedContexts = [
    "/api",
    "/admin",
    "/ping",
    "/match-record"
  ]
}

api {
  access {
    version-1.0 {
      status = "BETA"
      endpointsEnabled = true
    }
  }
}

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = INFO

# Logger provided to your application:
logger.application = DEBUG

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}

# Microservice specific config

akka {
  log-dead-letters-during-shutdown = false
}

auditing {
  enabled = true
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}


mongodb.uri = "mongodb://127.0.0.1:27017/organisations-matching-api"

json.encryption.key = "76fd48b978dfc4d2469eb7d64d1d7691"


cache {
  enabled = true
  ttlInSeconds = 18000
  colName = "matching-cache"
  key = "organisations-matching"
}

microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {
    auth {
      host = localhost
      port = 8500
    }

    organisations-matching {
      host = localhost
      port = 9658
    }

    integration-framework {
      host = localhost
      port = 8443
      authorization-token {
        sa = IF_BEARER_TOKEN
        ct = IF_BEARER_TOKEN
        vat = IF_BEARER_TOKEN
      }
      environment = isit
    }
  }
}

api-config {
  scopes {
    "read:organisations-matching-ho" {
      fields: [ "A", "B", "C", "D", "E", "F",
                "G", "H", "I", "J", "K", "L",
                "M", "N", "P", "Q", "R" ],

      endpoints: [ "A", "B", "C", "D" ]
    }
  }

  endpoints {
    internal {
      getCorporationTax {
        endpoint = "/organisations/matching/corporation-tax"
        title = "Get links to Corporation Tax and number of employees details for a matched organisation"
        fields: [ "A", "B", "C", "D", "E", "F", "G", "H", "I"],
      }
      getCorporationTaxMatch {
        endpoint = "/organisations/matching/corporation-tax/<matchId>"
        title = "Get links to Corporation Tax and number of employees details for a matched organisation"
        fields: [ "A", "B", "C", "D", "E", "F", "G", "H", "I"],
      }
      getSelfAssessment {
        endpoint = "/organisations/matching/self-assessment"
        title = "Get links to Self Assessment and number of employees details for a matched organisation"
        fields: [ "J", "K", "L", "M", "N" ],
      }
      getSelfAssessmentMatch {
        endpoint = "/organisations/matching/self-assessment/<matchId>"
        title = "Get links to Self Assessment and number of employees details for a matched organisation"
        fields: [ "J", "K", "L", "M", "N" ],
      }
      getVat {
        endpoint = "/organisations/matching/vat"
        title = "Get links to VAT for a matched organisation"
        fields = [ "P", "Q", "R" ]
      }
      getVatMatch {
        endpoint = "/organisations/matching/vat/<matchId>"
        title = "Get links to VAT for a matched organisation"
        fields = [ "P", "Q", "R" ]
      }

      # internal call for corporation utr?
      # TODO: Update when endpoint is added

      get-cutr {
        endpoint = "/organisations/matching/corporation-tax/get-cutr/<matchId>"
        title = "Get the organisation's details"
        fields: [ "O" ],
      }
    }
    external {

      # organisations details

      getCorporationTaxDetails {
        key = "A"
        endpoint = "/organisations/details/corporation-tax?matchId=<matchId>"
        title = "Get an organisation's Corporation Tax details"
      }
      getSelfAssessmentDetails {
        key = "B"
        endpoint = "/organisations/details/self-assessment?matchId=<matchId>"
        title = "Get an organisation's Self Assessment details"
      }
      getEmployeeCount {
        key = "C"
        endpoint = "/organisations/details/number-of-employees?matchId=<matchId>"
        title = "Find the number of employees for an organisation"
      }
      getVat {
        key = "D"
        endpoint = "/organisations/details/vat?matchId=<matchId>"
        title = "Get an organisation's VAT details"
      }
    }
  }

  fields {

    # corporation tax

    O = "utr"
    A = "crn"
    B = "registeredDetails/name/name1"
    C = "registeredDetails/name/name2"
    D = "registeredDetails/address/line1"
    E = "registeredDetails/address/postcode"
    F = "communicationsDetails/name/name1"
    G = "communicationsDetails/name/name2"
    H = "communicationsDetails/address/line1"
    I = "communicationsDetails/address/postcode"

    # self-assessment

    J = "utr"
    K = "taxPayerType"
    L = "taxPayerDetails/name"
    M = "taxPayerDetails/address/line1"
    N = "taxPayerDetails/address/postcode"

    # vat
    P = "approvedInformation/customerDetails/organisationName"
    Q = "approvedInformation/PPOB/address/line1"
    R = "approvedInformation/PPOB/address/postcode"
  }
}
